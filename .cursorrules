# RHYTM Project - Design & Development Rules

## 🎨 Icon Design Guidelines

### NEVER use colorful emoji icons or regular colorful icons
- **Prohibition**: No emoji icons (🎵, 🎯, 💰, 🎧, 🔗, ✨, etc.)
- **Prohibition**: No colorful icon libraries with bright colors
- **Reason**: These look cheap and don't fit the professional, minimalist theme

### ALWAYS use abstract vector-style icons
- **Requirement**: Use monochrome or duochrome SVG icons
- **Style**: Abstract, minimalist, line-based designs
- **Colors**: 
  - Primary: `text-emerald-400` (dark theme) / `text-emerald-600` (light theme)
  - Secondary: `text-white/60` or `text-gray-600`
  - Never use bright, saturated colors

### Icon Implementation Standards
- **Format**: Inline SVG with `stroke="currentColor"` and `fill="none"`
- **Size**: Consistent sizing (16px, 20px, 24px, 32px, 48px)
- **Stroke**: `strokeWidth="2"` for most icons
- **Accessibility**: Include proper `viewBox` and semantic meaning

### Examples of Good Icon Usage
```jsx
// ✅ Good - Abstract, monochrome, professional
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="text-emerald-400">
  <path d="M9 18V5l12-2v13"/>
  <circle cx="6" cy="18" r="3"/>
  <circle cx="18" cy="16" r="3"/>
</svg>

// ❌ Bad - Emoji, colorful, unprofessional
<div className="text-3xl">🎵</div>
```

## 🎯 Brand Consistency

### Color Palette
- **Primary Gradient**: `from-purple-400 via-pink-500 to-teal-400`
- **Accent**: `emerald-400` (dark) / `emerald-600` (light)
- **Background**: `#0a0a0d` (dark) / `#f0e7d8` (light)
- **Text**: `white` (dark) / `#1a1a17` (light)

### Typography
- **Headings**: Bold, gradient text for emphasis
- **Body**: Clean, readable fonts with proper contrast
- **Hierarchy**: Clear visual hierarchy with consistent spacing

## 🚀 Development Standards

### Component Structure
- Use TypeScript for all components
- Implement proper theme support (dark/light)
- Include hover states and transitions
- Maintain responsive design principles

### Performance
- Optimize SVG icons for size
- Use CSS-in-JS for dynamic styling
- Implement proper loading states
- Follow Next.js best practices

## 📱 User Experience

### Accessibility
- Proper ARIA labels for interactive elements
- Keyboard navigation support
- High contrast ratios
- Screen reader compatibility

### Visual Hierarchy
- Clear information architecture
- Consistent spacing and alignment
- Professional, modern aesthetic
- Focus on content readability

---

**Remember**: Every visual element should contribute to a cohesive, professional brand experience. When in doubt, choose minimalism and abstraction over colorful, playful elements.